datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  discordId    String   @unique
  displayName  String
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  memberships  Membership[]
  audits       Audit[]
  loginTokens  LoginToken[]
}

model Org {
  id                     String   @id @default(cuid())
  discordGuild           String   @unique // Keep for backwards compatibility
  discordGuildId         String?  @unique // New: proper Discord guild ID
  discordGuildName       String?  // Guild name from Discord
  discordIconHash        String?  // Guild icon hash
  discordBannerHash      String?  // Guild banner hash
  discordDescription     String?  // Guild description
  discordOwnerDiscordId  String?  // Discord user ID of guild owner
  name                   String
  iconUrl                String?
  defaultChan            String?
  lastSyncAt             DateTime? // Last Discord sync timestamp
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  memberships  Membership[]
  servers      Server[]
  audits       Audit[]
  settings     OrgSettings?
}

model Membership {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  org     Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId   String
  role    Role   @default(OPERATOR)
  createdAt DateTime @default(now())

  @@unique([userId, orgId])
}

enum Role {
  OWNER
  ADMIN
  OPERATOR
  VIEWER
}

model Server {
  id         String   @id @default(cuid())
  org        Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId      String
  name       String
  gameKey    String
  status     ServerStatus @default(STOPPED)
  ports      Json     @default("[]")
  containerId String?
  createdBy  String
  memoryCap  Int      @default(2048)  // Memory limit in MB
  cpuShares  Int      @default(2048)  // CPU shares (1024 = 1 core)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  configs       ConfigVersion[]
  jobs          Job[]
  backups       Backup[]
  customScript  CustomScript?

  @@index([orgId])
  @@index([status])
}

enum ServerStatus {
  CREATING
  RUNNING
  STOPPED
  ERROR
  DELETING
}

model ConfigVersion {
  id         String   @id @default(cuid())
  server     Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId   String
  schemaVer  String   @default("1.0")
  values     Json
  createdAt  DateTime @default(now())
  createdBy  String

  @@index([serverId])
}

model Job {
  id         String   @id @default(cuid())
  server     Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId   String
  type       JobType
  status     JobStatus @default(PENDING)
  progress   Int       @default(0)
  payload    Json      @default("{}")
  logs       String    @default("")
  error      String?
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([serverId])
  @@index([status])
}

enum JobType {
  CREATE
  START
  STOP
  DELETE
  RESTART
  BACKUP
  RESTORE
  PULL
}

enum JobStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

model Backup {
  id         String   @id @default(cuid())
  server     Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId   String
  location   String
  sizeBytes  Int
  createdAt  DateTime @default(now())
  notes      String?

  @@index([serverId])
}

model LoginToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orgId     String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([jti])
  @@index([expiresAt])
}

model PairingCode {
  code       String   @id
  userId     String
  orgId      String
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  @@index([expiresAt])
}

model Audit {
  id        String   @id @default(cuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id], onDelete: SetNull)
  orgId     String?
  org       Org?     @relation(fields: [orgId], references: [id], onDelete: SetNull)
  action    String
  target    String
  meta      Json     @default("{}")
  at        DateTime @default(now())

  @@index([orgId])
  @@index([actorId])
}

model CustomScript {
  id           String   @id @default(cuid())
  server       Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId     String   @unique
  scriptHash   String   // SHA-256 hash for integrity verification
  scriptType   String   @default("bash") // bash, python, etc.
  content      String   @db.Text
  portSpecs    Json     @default("[]") // Dynamic port requirements
  envVars      Json     @default("{}") // Environment variables
  validated    Boolean  @default(false) // Has passed security validation
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([serverId])
  @@index([scriptHash])
}

model Settings {
  id          String   @id @default("global") // Singleton pattern - only one settings record
  webDomain   String   @default("http://localhost:5173") // Public web app domain
  apiDomain   String   @default("http://localhost:8080") // Public API domain
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model OrgSettings {
  id                String   @id @default(cuid())
  org               Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String   @unique

  // Features
  aiEnabled         Boolean  @default(true)
  maxServers        Int      @default(10)
  maxBackups        Int      @default(5)

  // Default server settings
  defaultMemory     Int      @default(2048) // MB
  defaultCPU        Int      @default(2048) // CPU shares

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  rolePermissions   DiscordRolePermission[]

  @@index([orgId])
}

// Capability-based permissions for Discord roles
model DiscordRolePermission {
  id                String      @id @default(cuid())
  orgSettings       OrgSettings @relation(fields: [orgSettingsId], references: [id], onDelete: Cascade)
  orgSettingsId     String

  discordRoleId     String      // Discord role ID
  discordRoleName   String      // Role name (for display)
  discordRoleColor  Int         @default(0) // Role color from Discord

  // Server Management Permissions
  canCreateServer   Boolean     @default(false)
  canDeleteServer   Boolean     @default(false)
  canStartServer    Boolean     @default(false)
  canStopServer     Boolean     @default(false)
  canRestartServer  Boolean     @default(false)

  // Configuration Permissions
  canEditConfig     Boolean     @default(false)
  canEditFiles      Boolean     @default(false)
  canInstallMods    Boolean     @default(false)

  // Backup Permissions
  canCreateBackup   Boolean     @default(false)
  canRestoreBackup  Boolean     @default(false)
  canDeleteBackup   Boolean     @default(false)

  // Monitoring Permissions
  canViewLogs       Boolean     @default(true)  // Default to true for all
  canViewMetrics    Boolean     @default(true)  // Default to true for all
  canViewConsole    Boolean     @default(false)
  canExecuteCommands Boolean    @default(false) // Console commands

  // Admin Permissions
  canManageMembers  Boolean     @default(false) // Add/remove users
  canManageRoles    Boolean     @default(false) // Edit role permissions
  canManageSettings Boolean     @default(false) // Org settings

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([orgSettingsId, discordRoleId])
  @@index([orgSettingsId])
}

model SetupState {
  id                  String   @id @default("singleton")

  // Setup steps completed
  systemConfigured    Boolean  @default(false)
  oauthConfigured     Boolean  @default(false)
  botConfigured       Boolean  @default(false)
  guildSelected       Boolean  @default(false)
  rolesConfigured     Boolean  @default(false)

  // Setup data
  selectedGuildId     String?
  installerUserId     String?
  installerDiscordId  String?

  // Onboarding
  onboardingComplete  Boolean  @default(false)
  firstServerCreated  Boolean  @default(false)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model OAuthSession {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String   // Discord user ID
  accessToken   String   @db.Text
  refreshToken  String   @db.Text
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  @@index([sessionToken])
  @@index([expiresAt])
}